- name: Setup IPA Helper
  hosts: all
  tasks:
    - name: Store HOME directory
      debug:
        var: ansible_env.HOME

    - name: Check if Python3.11 is installed
      command: python3.11 --version
      register: python_installed
      failed_when: false
      changed_when: false

    - name: Install Python3.11
      yum:
        name: python3.11
        state: latest
      become: yes
      when: python_installed.rc != 0

    - name: Check if rust toolchain is installed
      command: rustup --version
      register: rustup_installed
      failed_when: false
      changed_when: false

    - name: Install Rustup
      shell: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
      args:
        executable: /bin/bash
      when: rustup_installed.rc != 0

    - name: Update Rust to 1.82
      command: rustup update 1.82.0

    - name: Set default to 1.82
      command: rustup default 1.82.0

    - name: Check if Git is installed
      command: git --version
      register: git_installed
      failed_when: false
      changed_when: false

    - name: Install Git
      yum:
        name: git
        state: latest
      become: yes
      when: git_installed.rc != 0

    - name: Install pip3
      command: python3.11 -m ensurepip
      become: yes
    - name: Upgrade pip3
      command: python3.11 -m pip install --upgrade pip
      become: yes

    - name: Check if directory is a git repository
      stat:
        path: '{{ ansible_env.HOME }}/draft/.git'
      register: git_repo

    - name: Clone repository if it doesn't exist
      git:
        repo: 'https://github.com/private-attribution/draft.git'
        dest: '{{ ansible_env.HOME }}/draft'
      when: not git_repo.stat.exists


    - name: Pull repository if it does exist
      git:
        repo: 'https://github.com/private-attribution/draft.git'
        dest: '{{ ansible_env.HOME }}/draft'
        clone: false
        version: main
      when: git_repo.stat.exists

    - name: Create virtualenv if it doesn't exist
      command: python3.11 -m venv .venv
      args:
        chdir: '{{ ansible_env.HOME }}/draft'
        creates: '{{ ansible_env.HOME }}/draft/.venv'

    - name: Install package in editable mode
      pip:
        name: '{{ ansible_env.HOME }}/draft'
        editable: yes
        virtualenv: '{{ ansible_env.HOME }}/draft/.venv'
        virtualenv_python: python3.11

    - name: Check if Traefik is installed
      command: '{{ ansible_env.HOME }}/draft/traefik version'
      register: traefik_installed
      failed_when: false
      changed_when: false

    - name: Download Traefik
      get_url:
        url: 'https://github.com/traefik/traefik/releases/download/v2.11.0/traefik_v2.11.0_linux_amd64.tar.gz'
        dest: '{{ ansible_env.HOME }}/traefik_v2.11.0_linux_amd64.tar.gz'
        checksum: 'sha256:7f31f1cc566bd094f038579fc36e354fd545cf899523eb507c3cfcbbdb8b9552'
      when: traefik_installed.rc != 0

    - name: Ensure extraction directory exists
      file:
        path: '{{ ansible_env.HOME }}/traefix_extract/'
        state: directory

    - name: Extract Traefik
      unarchive:
        src: '{{ ansible_env.HOME }}/traefik_v2.11.0_linux_amd64.tar.gz'
        dest: '{{ ansible_env.HOME }}/traefix_extract/'
        remote_src: yes
      when: traefik_installed.rc != 0

    - name: Copy Traefik binary into draft directory
      copy:
        src: '{{ ansible_env.HOME }}/traefix_extract/traefik'
        dest: '{{ ansible_env.HOME }}/draft'
        mode: '0775'
        remote_src: yes

    - name: Grant CAP_NET_BIND_SERVICE capability to traefik binary
      command: 'setcap cap_net_bind_service=+ep {{ ansible_env.HOME }}/draft/traefik'
      become: yes

    - name: Start helper sidecar
      shell: >
        source .venv/bin/activate &&
        draft start-helper-sidecar
        --identity {{ identity }}
        --helper_domain {{ helper_domain }}
        --sidecar_domain {{ sidecar_domain }}
        --config_path {{ ansible_env.HOME }}/draft/config
      args:
        chdir: '{{ ansible_env.HOME }}/draft'
        executable: /bin/bash
